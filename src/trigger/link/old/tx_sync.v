///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version : 1.8
//  \   \         Application : Virtex-6 FPGA GTX Transceiver Wizard
//  /   /         Filename : tx_sync.v
// /___/   /\     Timestamp :
// \   \  /  \
//  \___\/\___\
//
//
// Module TX_SYNC
// Generated by Xilinx Virtex-6 FPGA GTX Transceiver Wizard
// (c) Copyright 2009-2010 Xilinx, Inc. All rights reserved.
`timescale 1ns / 1ps
`define DLY #1

module TX_SYNC #
(
    parameter       SIM_TXPMASETPHASE_SPEEDUP   = 0
    )
    (
        output          TXENPMAPHASEALIGN,
        output          TXPMASETPHASE,
        output          TXDLYALIGNDISABLE,
        output          TXDLYALIGNRESET,
        output          SYNC_DONE,
        input           USER_CLK,
        input           RESET
    );


    //*******************************Register Declarations************************

    reg            begin_r;
    reg            phase_align_r;
    reg            ready_r;
    reg   [15:0]   sync_counter_r;
    reg   [5:0]    wait_before_setphase_counter_r;
    reg   [4:0]    align_reset_counter_r;
    reg            align_reset_r;
    reg            wait_before_setphase_r;

    //*******************************Wire Declarations****************************

    wire           count_setphase_complete_r;
    wire           count_32_complete_r;
    wire           count_align_reset_complete_r;
    wire           next_phase_align_c;
    wire           next_ready_c;
    wire           next_align_reset_c;
    wire           next_wait_before_setphase_c;

    //*******************************Main Body of Code****************************

//________________________________ State machine __________________________
// This state machine manages the TX phase alignment procedure of the GTX.
// The module is held in reset till TXRESETDONE is asserted. Once TXRESETDONE
// is asserted, the state machine goes into the align_reset_r state, asserting
// TXDLYALIGNRESET for 20 TXUSRCLK2 cycles. After this, it goes into the
// wait_before_setphase_r state for 32 cycles. After asserting TXENPMAPHASEALIGN and
// waiting 32 cycles, it goes into the phase_align_r state where the last
// part of the alignment procedure is completed. This involves asserting
// TXPMASETPHASE for 8192 (TXPLL_DIVSEL_OUT=1), 16384 (TXPLL_DIVSEL_OUT=2),
// or 32768 (TXPLL_DIVSEL_OUT=4) clock cycles. After completion of the phase
// alignment procedure, TXDLYALIGNDISABLE is deasserted.

// State registers
always @(posedge USER_CLK)
    if(RESET)
    {begin_r,align_reset_r,wait_before_setphase_r,phase_align_r,ready_r}  <=  `DLY    5'b10000;
    else
    begin
        begin_r                <=  `DLY    1'b0;
        align_reset_r          <=  `DLY    next_align_reset_c;
        wait_before_setphase_r <=  `DLY    next_wait_before_setphase_c;
        phase_align_r          <=  `DLY    next_phase_align_c;
        ready_r                <=  `DLY    next_ready_c;
    end

    // Next state logic
    assign  next_align_reset_c          =   begin_r |
    (align_reset_r & !count_align_reset_complete_r);

    assign  next_wait_before_setphase_c =   (align_reset_r & count_align_reset_complete_r) |
    (wait_before_setphase_r & !count_32_complete_r);

    assign  next_phase_align_c          =   (wait_before_setphase_r & count_32_complete_r) |
    (phase_align_r & !count_setphase_complete_r);

    assign  next_ready_c                =   (phase_align_r & count_setphase_complete_r) |
    ready_r;

    //______ Counter for holding TXDLYALIGNRESET for 20 TXUSRCLK2 cycles ______
    always @(posedge USER_CLK)
    begin
        if (!align_reset_r)
            align_reset_counter_r <= `DLY 5'b00000;
        else
            align_reset_counter_r <= `DLY align_reset_counter_r +1'b1;
    end

    assign count_align_reset_complete_r = align_reset_counter_r[4]
    & align_reset_counter_r[2];

    //_______ Counter for waiting 32 clock cycles before TXPMASETPHASE ________
    always @(posedge USER_CLK)
    begin
        if (!wait_before_setphase_r)
            wait_before_setphase_counter_r  <= `DLY  6'b000000;
        else
            wait_before_setphase_counter_r  <= `DLY  wait_before_setphase_counter_r + 1'b1;
    end

    assign count_32_complete_r = wait_before_setphase_counter_r[5];

    //_______________ Counter for holding SYNC for SYNC_CYCLES ________________
    always @(posedge USER_CLK)
    begin
        if (!phase_align_r)
            sync_counter_r <= `DLY  16'h0000;
        else
            sync_counter_r <= `DLY  sync_counter_r + 1'b1;
    end

    generate
    if(SIM_TXPMASETPHASE_SPEEDUP==1)
    begin:fast_simulation
        // 64 cycles of setphase for simulation
        assign count_setphase_complete_r = sync_counter_r[6];
    end
    else
    begin:no_fast_simulation
        // 8192 cycles of setphase for output divider of 1
        assign count_setphase_complete_r = sync_counter_r[13];
    end
    endgenerate

    //_______________ Assign the phase align ports into the GTX _______________

    assign TXDLYALIGNRESET   = align_reset_r;
    assign TXENPMAPHASEALIGN = !begin_r & !align_reset_r;
    assign TXPMASETPHASE     = phase_align_r;
    assign TXDLYALIGNDISABLE = !ready_r;

    //_______________________ Assign the sync_done port _______________________
    assign SYNC_DONE = ready_r;

//----------------------------------------------------------------------------------------------------------------------
endmodule
//----------------------------------------------------------------------------------------------------------------------
